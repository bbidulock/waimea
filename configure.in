AC_INIT
AM_INIT_AUTOMAKE(Waimea, 0.3.1)
AC_PROG_CXX
AC_LANG(C++)
AC_PROG_INSTALL

AC_PATH_X
AC_PATH_XTRA

CFLAGS="$CFLAGS $X_CFLAGS"
CXXFLAGS="$CXXFLAGS $X_CFLAGS"
LIBS="$LIBS $X_LIBS"
LDFLAGS="$LDFLAGS $LIBS $X_PRE_LIBS"

AC_MSG_CHECKING([for hash_map.h])
AC_TRY_LINK(
#include <hash_map.h>
      ,,
      AC_MSG_RESULT([yes]),      
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([Your libstdc++ installation does not have the extra hash classes]))

AC_MSG_CHECKING([for hash_set.h])
AC_TRY_LINK(
#include <hash_set.h>
      ,,
      AC_MSG_RESULT([yes]),
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([Your libstdc++ installation does not have the extra hash classes]))

AC_MSG_CHECKING([for list.h])
AC_TRY_LINK(
#include <list.h>
      ,,
      AC_MSG_RESULT([yes]),
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([Your libstdc++ installation does not have the extra list classes]))

AC_CHECK_PROGS(regex_cmd, sed)
if test x$regex_cmd = "x"; then
  AC_MSG_ERROR([error. sed is required to build the default style file.])
fi

AC_CHECK_LIB(X11, XOpenDisplay,
  LIBS="$LIBS -lX11",
  AC_MSG_ERROR([Could not find XOpenDisplay in -lX11.])
)

dnl Check for XShape extension support and proper library files
SHAPE=""
enableval="yes"
AC_MSG_CHECKING([whether to build support for the XShape extension])
AC_ARG_ENABLE(
  shape, [  --enable-shape          enable support of the XShape extension [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xext, XShapeCombineShape,
    AC_MSG_CHECKING([for X11/extensions/shape.h])
    AC_TRY_LINK(
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/extensions/shape.h>
, long foo = ShapeSet,
      AC_MSG_RESULT([yes])
      SHAPE="-DSHAPE"; Xext_lib="-lXext",
      AC_MSG_RESULT([no])
    )
  )
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(SHAPE)

LIBS="$LIBS $Xext_lib"

dnl Checks for XRender extension support
XRENDER=""
enableval="yes"
have_xrender="false"
AC_MSG_CHECKING([whether to build support for the XRender extension])
AC_ARG_ENABLE(
  xrender, [  --enable-xrender        enable support of the XRender extension if available [default=yes]])
: ${enableval="yes"}

if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xrender, XRenderFindFormat,
    AC_MSG_CHECKING([for X11/extensions/Xrender.h])
    AC_TRY_LINK(
#include <X11/Xlib.h>
#include <X11/extensions/Xrender.h>
      ,,
      AC_MSG_RESULT([yes])
      XRENDER="-DXRENDER"; XRender_lib="-lXrender"; have_xrender="true",
      AC_MSG_RESULT([no])
      AC_MSG_RESULT([** WARNING: X11/extensions/Xrender.h is missing])
      AC_MSG_RESULT([** WARNING: Disabled XRender extension support])
    ),             
  AC_MSG_RESULT([** WARNING: Could not find XRenderFindFormat in -lXrender])
  AC_MSG_RESULT([** WARNING: Disabled XRender extension support]))
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(XRENDER)

LIBS="$LIBS $XRender_lib"

dnl Checks for Xft library support
enableval="yes"
XFT=""
AC_MSG_CHECKING([whether to build support for the Xft library])
AC_ARG_ENABLE(
  xft, [  --enable-xft            enable support of the Xft library if available [default=yes]])
: ${enableval="yes"}
if test x$enableval = "xyes"; then
   AC_MSG_RESULT([yes])
   if test x$have_xrender = "xtrue" ; then
   dnl Checks for Xft
    AC_CHECK_LIB(Xft, XftFontOpen,
      AC_MSG_CHECKING([for X11/Xft/Xft.h])
    AC_TRY_LINK(
#include <X11/Xlib.h>
#include <X11/Xft/Xft.h>
      ,,
      AC_MSG_RESULT([yes])
      XFT="-DXFT"; Xft_lib="-lXft",
      AC_MSG_RESULT([no])
      AC_MSG_RESULT([** WARNING: X11/Xft/Xft.h is missing])
      AC_MSG_RESULT([** WARNING: Disabled Xft library support])
    ),
    AC_MSG_RESULT([** WARNING: Could not find XftFontOpen in -lXft])
    AC_MSG_RESULT([** WARNING: Disabled Xft library support]))
  fi
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(XFT)

LIBS="$LIBS $Xft_lib"

dnl Check for Interlacing
INTERLACE=""
enableval="yes"
AC_MSG_CHECKING([whether to include interlacing image code])
AC_ARG_ENABLE(
  interlace, [  --enable-interlace      include code for image interlacing [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  INTERLACE="-DINTERLACE"
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(INTERLACE)

dnl Check for ordered 8bpp dithering
ORDEREDPSEUDO=""
enableval="yes"
AC_MSG_CHECKING([whether to include Pseudocolor ordered dithering code])
AC_ARG_ENABLE(ordered-pseudo,
[  --enable-ordered-pseudo include code for ordered pseudocolor (8bpp)
                          dithering [default=no]],
  if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    ORDEREDPSEUDO="-DORDEREDPSEUDO"
  else
    AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([no])
)
AC_SUBST(ORDEREDPSEUDO)

save_cppflags="$CPPFLAGS"
save_ldflags="$LDFLAGS"
dnl Check for pixmap support
enableval="yes"
PIXMAP=""
USE_IMLIB=0
AC_MSG_CHECKING([whether to include pixmap support])
AC_ARG_ENABLE(
  pixmap, [  --enable-pixmap         include code for pixmap textures [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  USE_IMLIB=1
  AC_ARG_WITH(imlib2dir,
   [  --with-imlib2dir[=DIR]    Imlib2 in DIR],,withval=no)

  if test "x$withval" != "xno" && test "x$withval" != "xyes"; then 
     CPPFLAGS="$CPPFLAGS -I${withval}/include"
     LDFLAGS="$LDFLAGS -L${withval}/lib"
  fi
else
   AC_MSG_RESULT([no])
fi

if test $USE_IMLIB -eq 1 ; then
  AC_CHECK_LIB(dl, dlopen,
    AC_CHECK_LIB(ttf, TT_Init_FreeType,
      AC_CHECK_LIB(Imlib2, imlib_create_image,
        PIXMAP="-DPIXMAP"; Imlib2_lib=" -lImlib2",
        AC_MSG_RESULT([** WARNING: Could not find imlib_create_imaget in -lImlib2])
        AC_MSG_RESULT([** WARNING: Disabled pixmap support]),)
      ,
      AC_MSG_RESULT([** WARNING: Could not find TT_Init_FreeType in -lttf])
      AC_MSG_RESULT([** WARNING: Disabled pixmap support]),)
    ,
    AC_MSG_RESULT([** WARNING: Could not find dlopen in -ldl])
    AC_MSG_RESULT([** WARNING: Disabled pixmap support]),)
fi

if test "$PIXMAP" != "-DPIXMAP" ; then
  CPPFLAGS="$save_cppflags"
  LDFLAGS="$save_ldflags"
fi

LIBS="$LIBS $Imlib2_lib"

AC_SUBST(PIXMAP)

AC_OUTPUT([Makefile 
src/Makefile
data/Makefile
data/actions/Makefile
data/styles/Makefile
data/backgrounds/Makefile
doc/Makefile])
