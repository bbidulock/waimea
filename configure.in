AC_INIT
AM_INIT_AUTOMAKE(Waimea, 0.2.0)
AC_PROG_CXX
AC_PROG_INSTALL

AC_PATH_X
AC_PATH_XTRA

CFLAGS="$CFLAGS $X_CFLAGS"
CXXFLAGS="$CXXFLAGS $X_CFLAGS"
LIBS="$LIBS $X_LIBS"
LDFLAGS="$LDFLAGS $LIBS $X_PRE_LIBS"

AC_LANG([C++])

AC_CHECK_HEADER(hash_map.h,,
AC_MSG_ERROR([Your libstdc++ installation does not have the extra hash classes]))
AC_CHECK_HEADER(hash_set.h,,
AC_MSG_ERROR([Your libstdc++ installation does not have the extra hash classes]))
AC_CHECK_HEADER(list.h,,
AC_MSG_ERROR([Your libstdc++ installation does not have the extra list classes]))


AC_CHECK_PROGS(regex_cmd, sed)
if test x$regex_cmd = "x"; then
  AC_MSG_ERROR([error. sed is required to build the default style file.])
fi

AC_CHECK_LIB(X11, XOpenDisplay,
  LIBS="$LIBS -lX11",
  AC_MSG_ERROR([Could not find XOpenDisplay in -lX11.])
)

dnl Check for XShape extension support and proper library files
SHAPE=""
AC_MSG_CHECKING([whether to build support for the XShape extension])
AC_ARG_ENABLE(
  shape, [  --enable-shape          enable support of the XShape extension [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xext, XShapeCombineShape,
    AC_MSG_CHECKING([for X11/extensions/shape.h])
    AC_TRY_LINK(
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/extensions/shape.h>
, long foo = ShapeSet,
      AC_MSG_RESULT([yes])
      SHAPE="-DSHAPE"; Xext_lib="-lXext",
      AC_MSG_RESULT([no])
    )
  )
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(SHAPE)

LIBS="$LIBS $Xext_lib"


dnl Checks for Xft extension support
XFT=""
AC_MSG_CHECKING([whether to build support for the Xft extension])
AC_ARG_ENABLE(
  xft, [  --enable-xft            enable xft extension if available [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  dnl Checks for freetype/freetype.h
  have_freetype="false"
  AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)
  if test "x$FREETYPE_CONFIG" != "xno" ; then
    FREETYPE_CFLAGS=`$FREETYPE_CONFIG --cflags`
    save_cppflags="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS $FREETYPE_CFLAGS"
    AC_CHECK_HEADER(freetype/freetype.h, 
      have_freetype="true",
      AC_MSG_RESULT([** WARNING: freetype/freetype.h is missing])
      AC_MSG_RESULT([** WARNING: Disabled xft extension support])
      CPPFLAGS="$save_cppflags")
  else
    AC_MSG_RESULT([** WARNING: freetype/freetype.h is missing])
    AC_MSG_RESULT([** WARNING: Disabled xft extension support])
  fi

  dnl Checks for Xft/XRender
  if test $have_freetype = true ; then
    AC_CHECK_LIB(Xrender, XRenderFindFormat, 
      [AC_CHECK_LIB(Xft, XftFontOpen,
        [AC_CHECK_HEADER(X11/Xft/Xft.h, XFT="-DXFT"; Xft_lib="-lXft",
          AC_MSG_RESULT([** WARNING: X11/Xft/Xft.h is missing])
          AC_MSG_RESULT([** WARNING: Disabled xft extension support]
          CPPFLAGS="$save_cppflags"))],
        AC_MSG_RESULT([** WARNING: Could not find XftFontOpen in -lXft])
        AC_MSG_RESULT([** WARNING: Disabled xft extension support])
        CPPFLAGS="$save_cppflags")],
      AC_MSG_RESULT([** WARNING: Could not find XRenderFindFormat in -lXrender])
      AC_MSG_RESULT([** WARNING: Disabled xft extension support])
      CPPFLAGS="$save_cppflags")
  fi
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(XFT)

LIBS="$LIBS $Xft_lib"

dnl Check for Interlacing
INTERLACE=""
AC_MSG_CHECKING([whether to include interlacing image code])
AC_ARG_ENABLE(
  interlace, [  --enable-interlace      include code for image interlacing [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  INTERLACE="-DINTERLACE"
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(INTERLACE)

dnl Check for ordered 8bpp dithering
ORDEREDPSEUDO=""
AC_MSG_CHECKING([whether to include Pseudocolor ordered dithering code])
AC_ARG_ENABLE(ordered-pseudo,
[  --enable-ordered-pseudo include code for ordered pseudocolor (8bpp)
                          dithering [default=no]],
  if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    ORDEREDPSEUDO="-DORDEREDPSEUDO"
  else
    AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([no])
)
AC_SUBST(ORDEREDPSEUDO)

AC_CONFIG_FILES([Makefile 
src/Makefile
data/Makefile
data/actions/Makefile
data/styles/Makefile
data/backgrounds/Makefile
doc/Makefile])
AC_OUTPUT
